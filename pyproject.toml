[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "fep-cognitive-architecture"
version = "1.0.0"
description = "Free Energy Principle-based Cognitive AI System with Mathematical Rigor"
readme = "README.md"
license = "MIT"
authors = [
    {name = "FEP Research Team", email = "research@fep-cognitive.ai"}
]
maintainers = [
    {name = "FEP Research Team", email = "research@fep-cognitive.ai"}
]
keywords = [
    "artificial intelligence", "cognitive architecture", "free energy principle",
    "active inference", "predictive coding", "machine learning", "neuroscience",
    "consciousness", "bayesian brain", "variational inference", "security"
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers", 
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Operating System :: OS Independent",
]
requires-python = ">=3.8"

# Core dependencies
dependencies = [
    "numpy>=1.21.0",
    "scipy>=1.7.0", 
    "scikit-learn>=1.0.0",
    "torch>=1.11.0",
    "tensorflow>=2.8.0",
    "tensorflow-probability>=0.15.0",
    "pandas>=1.3.0",
    "matplotlib>=3.4.0",
    "requests>=2.25.0",
    "jsonschema>=4.0.0",
    "joblib>=1.1.0",
]

# Optional dependencies
[project.optional-dependencies]
web = [
    "flask>=2.0.0",
    "flask-cors>=3.0.0", 
    "flask-socketio>=5.0.0",
]
visualization = [
    "plotly>=5.0.0",
    "seaborn>=0.11.0",
    "ipywidgets>=7.6.0",
]
dev = [
    "pytest>=6.0.0",
    "black>=21.0.0",
    "flake8>=4.0.0",
    "mypy>=0.910",
    "isort>=5.9.0",
    "pre-commit>=2.15.0",
]
docs = [
    "sphinx>=4.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "sphinx-autodoc-typehints>=1.12.0",
]
security = [
    "cryptography>=3.4.0",
    "validators>=0.18.0",
]
monitoring = [
    "psutil>=5.8.0",
    "memory-profiler>=0.60.0",
]
nlp = [
    "transformers>=4.20.0",
    "huggingface-hub>=0.8.0",
    "tokenizers>=0.12.0",
]
all = [
    "flask>=2.0.0", "flask-cors>=3.0.0", "flask-socketio>=5.0.0",
    "plotly>=5.0.0", "seaborn>=0.11.0", "ipywidgets>=7.6.0", 
    "pytest>=6.0.0", "black>=21.0.0", "flake8>=4.0.0", "mypy>=0.910",
    "sphinx>=4.0.0", "sphinx-rtd-theme>=1.0.0",
    "cryptography>=3.4.0", "validators>=0.18.0",
    "psutil>=5.8.0", "memory-profiler>=0.60.0",
    "transformers>=4.20.0", "huggingface-hub>=0.8.0",
]

[project.urls]
Homepage = "https://github.com/idkcallme/FEP"
Documentation = "https://github.com/idkcallme/FEP/docs"
Repository = "https://github.com/idkcallme/FEP"
"Bug Tracker" = "https://github.com/idkcallme/FEP/issues"
Research = "https://github.com/idkcallme/FEP/research"

[project.scripts]
fep-demo = "fep_cognitive_architecture:main"
fep-test = "test_fep_mathematics:main" 
fep-benchmark = "real_benchmark_integration:main"
fep-security = "real_fep_security_system:main"

# Tool configurations
[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
"*" = ["*.json", "*.csv", "*.md", "*.txt"]

# Black code formatter
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort import sorter
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["fep_cognitive"]

# MyPy type checker
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_functions = ["test_*"]
addopts = "-v --tb=short --strict-markers"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
